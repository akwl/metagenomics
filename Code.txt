setwd("C:/Users/Dell/OneDrive - University College London/Courses/BIOC0023 Specialist Research Project in Metagenomics/Submissions & Assessments/Essay/Data Analysis")

library(scales)
library(ggplot2)
library(reshape2)
library(ggrepel)
library(RColorBrewer)
library(rprintf)
library(ggpubr)
library(gridExtra)
library("plot3D")
library("plot3Drgl")
library("plotly")

#Level 3
level_3 = read.csv("level-3.csv")
classes = as.matrix(level_3[,-c(1,26:30)])
#classes = apply(as.matrix(level_3[,-c(1,26:30)]), 2, rescale)
write.csv(classes, "level-3-rescaled.csv")
write.csv(cor(classes), "heatmap.csv")
#Cor between classes
par(oma = c(13,0,0,13), xpd = TRUE)
#svg("heatmap.svg")
heatmap(cor(classes), scale = "none", col = rev(colorRampPalette(brewer.pal(11, "RdBu"))(256)), cexRow = 0.7, cexCol = 0.7, margins = c(7.5,7.5)) 
legend(x = "bottomright", inset = c(-0.7,-0.55), legend = c(1, 0, -1), fill=colorRampPalette(brewer.pal(11, "RdBu"))(3), cex = 0.5)# , inset = c(0, -2)
dev.off()
#Cor between samples
heatmap(cor(t(classes)), scale = "none", col = rev(colorRampPalette(brewer.pal(11, "RdBu"))(256)))
legend(x="right", legend=c(-1,0,1), fill=rev(colorRampPalette(brewer.pal(11, "RdBu"))(3)))

'
#Level 6
level_6 = read.csv("level-6.csv")
genuses = level_6[,-c(1,72,73,76)]
write.csv(cor(genuses), "heatmap.csv")
'

head(classes)

#Relative abundances before and after oil pulling
before = classes[which(level_3[,"Oil.Pulling...Before..2..or.After..1.."] == 2),]
after = classes[which(level_3[,"Oil.Pulling...Before..2..or.After..1.."] == 1),]

before_sum = rowSums(before)
after_sum = rowSums(after)
all_abundances_sum_ba = matrix(data = NA, nrow = length(before_sum), ncol = 2)
colnames(all_abundances_sum_ba) = c("Before", "After")
all_abundances_sum_ba[,1] = before_sum
all_abundances_sum_ba[,2] = c(after_sum, rep(NA, length(before_sum)-length(after_sum)))
na.pass(all_abundances_sum_ba)

all_abundances_sum_ba_melted = melt(all_abundances_sum_ba)

ggplot(all_abundances_sum_ba_melted, aes(x=value, fill=Var2, colour=Var2)) + 
  geom_density(alpha=0.25) + 
  labs(x = "Relative abundance", y = "Frequency") +
  theme(legend.title = element_blank())

wilcox.test(all_abundances_sum_ba[,1], all_abundances_sum_ba[,2], paired = FALSE)$p.value

max_mean_min_ba_melted = melt(max_mean_min_ba)

max_mean_min_ba_melted = cbind(max_mean_min_ba_melted, rep(c("max", "mean", "min"), nrow(max_mean_min_ba_melted)/3))
colnames(max_mean_min_ba_melted)[4] = "statistic"
max_mean_min_ba_melted[,3] = as.numeric(max_mean_min_ba_melted[,3])

ggplot(max_mean_min_ba_melted, aes(x=value, fill=Var1, colour=Var1)) + 
  geom_density(alpha=0.25) + 
  labs(x = "relative abundance", y = "frequency")

#Relative abundances before and after oil pulling each day
before_day_1 = classes[which(level_3[,"Oil.Pulling...Before..2..or.After..1.."] == 2 & level_3[,"Sampling.Day.."] == 1),]
after_day_1 = classes[which(level_3[,"Oil.Pulling...Before..2..or.After..1.."] == 1 & level_3[,"Sampling.Day.."] == 1),]
before_day_16 = classes[which(level_3[,"Oil.Pulling...Before..2..or.After..1.."] == 2 & level_3[,"Sampling.Day.."] == 16),]
after_day_16 = classes[which(level_3[,"Oil.Pulling...Before..2..or.After..1.."] == 1 & level_3[,"Sampling.Day.."] == 16),]
before_day_31 = classes[which(level_3[,"Oil.Pulling...Before..2..or.After..1.."] == 2 & level_3[,"Sampling.Day.."] == 31),]
after_day_31 = classes[which(level_3[,"Oil.Pulling...Before..2..or.After..1.."] == 1 & level_3[,"Sampling.Day.."] == 31),]

before_day_1_sum = rowSums(before_day_1)
after_day_1_sum = rowSums(after_day_1)
before_day_16_sum = rowSums(before_day_16)
after_day_16_sum = rowSums(after_day_16)
before_day_31_sum = rowSums(before_day_31)
after_day_31_sum = rowSums(after_day_31)
maxlength = max(length(before_day_1_sum), length(after_day_1_sum), length(before_day_16_sum), length(after_day_16_sum), length(before_day_31_sum), length(after_day_31_sum))

all_abundances_sum_ba_each_day = matrix(data = NA, nrow = maxlength, ncol = 6)
colnames(all_abundances_sum_ba_each_day) = c("Before Day 1", "After Day 1",
                                             "Before Day 16", "After Day 16",
                                             "Before Day 31", "After Day 31")
all_abundances_sum_ba_each_day[,1] = c(before_day_1_sum, rep(NA, maxlength-length(before_day_1_sum)))
all_abundances_sum_ba_each_day[,2] = c(after_day_1_sum, rep(NA, maxlength-length(after_day_1_sum)))
all_abundances_sum_ba_each_day[,3] = c(before_day_16_sum, rep(NA, maxlength-length(before_day_16_sum)))
all_abundances_sum_ba_each_day[,4] = c(after_day_16_sum, rep(NA, maxlength-length(after_day_16_sum)))
all_abundances_sum_ba_each_day[,5] = c(before_day_31_sum, rep(NA, maxlength-length(before_day_31_sum)))
all_abundances_sum_ba_each_day[,6] = c(after_day_31_sum, rep(NA, maxlength-length(after_day_31_sum)))
na.pass(all_abundances_sum_ba_each_day)

all_abundances_sum_ba_each_day_melted = melt(all_abundances_sum_ba_each_day)
all_abundances_sum_ba_day_1_melted = melt(all_abundances_sum_ba_each_day[,c(1,2)])
all_abundances_sum_ba_day_16_melted = melt(all_abundances_sum_ba_each_day[,c(3,4)])
all_abundances_sum_ba_day_31_melted = melt(all_abundances_sum_ba_each_day[,c(5,6)])
all_abundances_sum_bb_day1_day_31_melted = melt(all_abundances_sum_ba_each_day[,c(1,5)])
#all_abundances_sum_ba_each_day_melted = all_abundances_sum_ba_each_day_melted[-which(is.na(all_abundances_sum_ba_each_day_melted[,"value"])),-1]

plot1 <- ggplot(all_abundances_sum_ba_day_1_melted, aes(x=value, fill=Var2, colour=Var2, rm.na = TRUE)) + 
  geom_density(alpha=0.25) + 
  labs(x = "Relative abundance", y = "Frequency", title = "Day 1") +
  theme(legend.title = element_blank())

plot2 <- ggplot(all_abundances_sum_ba_day_16_melted, aes(x=value, fill=Var2, colour=Var2, rm.na = TRUE)) + 
  geom_density(alpha=0.25) + 
  labs(x = "Relative abundance", y = "Frequency", title = "Day 16") +
  theme(legend.title = element_blank())

plot3 <- ggplot(all_abundances_sum_ba_day_31_melted, aes(x=value, fill=Var2, colour=Var2, rm.na = TRUE)) + 
  geom_density(alpha=0.25) + 
  labs(x = "Relative abundance", y = "Frequency", title = "Day 31") +
  theme(legend.title = element_blank())

plot4 <- ggplot(all_abundances_sum_bb_day1_day_31_melted, aes(x=value, fill=Var2, colour=Var2, rm.na = TRUE)) + 
  geom_density(alpha=0.25) + 
  labs(x = "Relative abundance", y = "Frequency", title = "Before Day 1 vs. Before Day 31") +
  theme(legend.title = element_blank())

grid.arrange(plot1, plot2, plot3, plot4, ncol=2)

wilcox.test(all_abundances_sum_ba_each_day[,1], all_abundances_sum_ba_each_day[,2], paired = FALSE, alternative = "less")$p.value
wilcox.test(all_abundances_sum_ba_each_day[,3], all_abundances_sum_ba_each_day[,4], paired = FALSE)$p.value
wilcox.test(all_abundances_sum_ba_each_day[,5], all_abundances_sum_ba_each_day[,6], paired = FALSE)$statistic
wilcox.test(all_abundances_sum_ba_each_day[,1], all_abundances_sum_ba_each_day[,5], paired = FALSE)$p.value

#Relative abundances with ranges along time
day_1 = classes[which(level_3[,"Sampling.Day.."] == 1),]
day_16 = classes[which(level_3[,"Sampling.Day.."] == 16),]
day_31 = classes[which(level_3[,"Sampling.Day.."] == 31),]

max_mean_min = matrix(NA, ncol = 24, nrow = 9, 
                      dimnames = list(c("Day 1", "Day 1", "Day 1",
                                        "Day 16", "Day 16", "Day 16",
                                        "Day 31", "Day 31", "Day 31"), 
                                      colnames(classes)))

max_mean_min[1,] = apply(day_1, 2, max)
max_mean_min[2,] = apply(day_1, 2, mean)
max_mean_min[3,] = apply(day_1, 2, min)
max_mean_min[4,] = apply(day_16, 2, max)
max_mean_min[5,] = apply(day_16, 2, mean)
max_mean_min[6,] = apply(day_16, 2, min)
max_mean_min[7,] = apply(day_31, 2, max)
max_mean_min[8,] = apply(day_31, 2, mean)
max_mean_min[9,] = apply(day_31, 2, min)
write.csv(max_mean_min, "max_mean_min.csv")
#max_mean_min = cbind(max_mean_min, c("Day 1", "Day 1", "Day 1", "Day 16", "Day 16", "Day 16", "Day 31", "Day 31", "Day 31"))
#max_mean_min = cbind(max_mean_min, c(rep(c("Max", "Mean", "Min"), 3)))

max_mean_min_melted = melt(max_mean_min)

max_mean_min_melted = cbind(max_mean_min_melted, rep(c("max", "mean", "min"), nrow(max_mean_min_melted)/3))
colnames(max_mean_min_melted)[4] = "statistic"
max_mean_min_melted[,3] = as.numeric(max_mean_min_melted[,3])

ggplot(max_mean_min_melted, aes(x=Var1, y=value, group=Var2, color=Var2, fill = "")) +
  coord_cartesian(clip = "off", expand = TRUE, xlim = c(1,4.25)) +
  geom_line(data = subset(max_mean_min_melted, statistic == "mean"), stat = "identity", size = 0.5) +
  geom_point(data = subset(max_mean_min_melted, statistic == "mean"), stat = "identity") +
  geom_text_repel(data = subset(max_mean_min_melted, statistic == "mean" & Var1 == "Day 31"), 
            aes(label = Var2, colour = Var2, x = Var1, y = value), size = 4, hjust = -.1, direction = "y", xlim = 4.75, segment.colour = "none") +
  labs(title = "Relative abundance of classes", x = "Day", y = "Relative abundance") +
  scale_y_log10() +
  theme(legend.position = "None", 
        axis.text = element_text(size = 12), 
        axis.title = element_text(size = 16), 
        title = element_text(size = 16)) #legend.position="bottom", legend.text = element_text(size = 8)
  #geom_errorbar(aes(ymin=subset(max_mean_min_melted, statistic == "min"), ymax=subset(max_mean_min_melted, statistic == "max")), width=.2, position=position_dodge(0.05))

##Density plot showing relative amounts of bacteria across all samples between different days

#Sum of abundances of all bacteria over each sample
day_1_sum = rowSums(day_1)
day_16_sum = rowSums(day_16)
day_31_sum = rowSums(day_31)
all_abundances_sum = matrix(data = NA, nrow = max(dim(day_1)[1],dim(day_16)[1],dim(day_31)[1]), ncol = 3)
all_abundances_sum[,1] = c(day_1_sum, rep(NA, (nrow(all_abundances_sum)-length(day_1_sum))))
all_abundances_sum[,2] = c(day_16_sum, rep(NA, (nrow(all_abundances_sum)-length(day_16_sum))))
all_abundances_sum[,3] = c(day_31_sum, rep(NA, (nrow(all_abundances_sum)-length(day_31_sum))))
na.pass(all_abundances_sum)
colnames(all_abundances_sum) = c("Day 1", "Day 16", "Day 31")
all_abundances_sum_melted = melt(all_abundances_sum)[,-1]
colnames(all_abundances_sum_melted) = c("Day", "value")

ggplot(all_abundances_sum_melted, aes(x=value, fill=Day, colour=Day)) + 
  geom_density(alpha=0.25) + 
  labs(x = "relative abundance", y = "frequency")

day_1_vs_day_16_p_value = wilcox.test(all_abundances_sum[,"Day 1"], all_abundances_sum[,"Day 16"], paired = TRUE)$p.value
day_16_vs_day_31_p_value = wilcox.test(all_abundances_sum[,"Day 16"], all_abundances_sum[,"Day 31"], paired = TRUE)$p.value

#Significance of differences of each CLASS between different days
classes_day_p_values = matrix(data = NA, nrow = ncol(classes), ncol = 2)
colnames(classes_day_p_values) = c("Day 16 vs. Day 1", "Day 31 vs. Day 16")
rownames(classes_day_p_values) = colnames(classes)

classes_day_p_values_test = function(){
  for (class in 24:nrow(classes)){
  classes_day_p_values[class,1] = wilcox.test(day_1[,class], day_16[,class], paired = FALSE)$p.value
  classes_day_p_values[class,2] = wilcox.test(day_16[,class], day_31[,class], paired = FALSE)$p.value
  return(classes_day_p_values)
  }
}

write.csv(classes_day_p_values, "classes_day_p_values.csv")

#Significance of differences of each GENUS between different days
level_6 = read.csv("level-6.csv")
genuses = level_6[,-c(1,72,73,76)]
day_1_genuses = genuses[which(level_6[,"Sampling.Day.."] == 1),]
day_16_genuses = genuses[which(level_6[,"Sampling.Day.."] == 16),]
day_31_genuses = genuses[which(level_6[,"Sampling.Day.."] == 31),]
genuses_day_p_values = matrix(data = NA, nrow = ncol(genuses), ncol = 2)
#all genuses
for (genus in 1:72){
  genuses_day_p_values[genus,1] = wilcox.test(day_1_genuses[,genus], day_16_genuses[,genus], paired = FALSE)$p.value
  genuses_day_p_values[genus,2] = wilcox.test(day_16_genuses[,genus], day_31_genuses[,genus], paired = FALSE)$p.value
  return(genuses_day_p_values)
}
#actinomyces, streptococcus, veillonella, trepenoma, porphyromonas, haemophilus, corynebacterium, fusobacterium
genuses_subset = level_6[,c(7,9,18,31,43,46,63,70)]
day_1_genuses_subset = genuses_subset[which(level_6[,"Sampling.Day.."] == 1),]
day_16_genuses_subset = genuses_subset[which(level_6[,"Sampling.Day.."] == 16),]
day_31_genuses_subset = genuses_subset[which(level_6[,"Sampling.Day.."] == 31),]
day_1_before_genuses_subset = genuses_subset[which(level_6[,"Sampling.Day.."] == 1 & level_6[,"Oil.Pulling...Before..2..or.After..1.."] == 2),]
day_1_after_genuses_subset = genuses_subset[which(level_6[,"Sampling.Day.."] == 1 & level_6[,"Oil.Pulling...Before..2..or.After..1.."] == 1),]
day_16_before_genuses_subset = genuses_subset[which(level_6[,"Sampling.Day.."] == 16 & level_6[,"Oil.Pulling...Before..2..or.After..1.."] == 2),]
day_16_after_genuses_subset = genuses_subset[which(level_6[,"Sampling.Day.."] == 16 & level_6[,"Oil.Pulling...Before..2..or.After..1.."] == 1),]
day_31_before_genuses_subset = genuses_subset[which(level_6[,"Sampling.Day.."] == 31 & level_6[,"Oil.Pulling...Before..2..or.After..1.."] == 2),]
day_31_after_genuses_subset = genuses_subset[which(level_6[,"Sampling.Day.."] == 31 & level_6[,"Oil.Pulling...Before..2..or.After..1.."] == 1),]

genuses_subset_day_p_values = matrix(data = NA, nrow = ncol(genuses_subset), ncol = 4)
for (genus in 6:ncol(genuses_subset)){
  genuses_subset_day_p_values[genus,1] = wilcox.test(day_1_before_genuses_subset[,genus], day_31_before_genuses_subset[,genus], paired = FALSE)$p.value
  genuses_subset_day_p_values[genus,2] = wilcox.test(day_1_before_genuses_subset[,genus], day_1_after_genuses_subset[,genus], paired = FALSE)$p.value
  genuses_subset_day_p_values[genus,3] = wilcox.test(day_16_before_genuses_subset[,genus], day_16_after_genuses_subset[,genus], paired = FALSE)$p.value
  genuses_subset_day_p_values[genus,4] = wilcox.test(day_31_before_genuses_subset[,genus], day_31_after_genuses_subset[,genus], paired = FALSE)$p.value
  return(genuses_day_p_values)
}
rownames(genuses_subset_day_p_values) = c("actinomyces", "corynebacterium", "porphyromonas", "streptococcus", "veillonella", "fusobacterium", "haemophilus", "trepenoma")
colnames(genuses_subset_day_p_values) = c("Day 31 Before vs. Day 1 Before",
                                          "Day 1 Before vs. After", 
                                          "Day 16 Before vs. After", 
                                          "Day 31 Before vs. After")
write.csv(genuses_subset_day_p_values, "genuses_subset_day_p_values.csv")

genuses_subset_day_W_values = matrix(data = NA, nrow = ncol(genuses_subset), ncol = 4)
for (genus in 6:ncol(genuses_subset)){
  genuses_subset_day_W_values[genus,1] = wilcox.test(day_1_before_genuses_subset[,genus], day_31_before_genuses_subset[,genus], paired = FALSE)$p.value
  genuses_subset_day_W_values[genus,2] = wilcox.test(day_1_before_genuses_subset[,genus], day_1_after_genuses_subset[,genus], paired = FALSE)$p.value
  genuses_subset_day_W_values[genus,3] = wilcox.test(day_16_before_genuses_subset[,genus], day_16_after_genuses_subset[,genus], paired = FALSE)$p.value
  genuses_subset_day_W_values[genus,4] = wilcox.test(day_31_before_genuses_subset[,genus], day_31_after_genuses_subset[,genus], paired = FALSE)$p.value
  return(genuses_day_W_values)
}
rownames(genuses_subset_day_W_values) = c("actinomyces", "corynebacterium", "porphyromonas", "streptococcus", "veillonella", "fusobacterium", "haemophilus", "trepenoma")
colnames(genuses_subset_day_W_values) = c("Day 31 Before vs. Day 1 Before",
                                          "Day 1 Before vs. After", 
                                          "Day 16 Before vs. After", 
                                          "Day 31 Before vs. After")
write.csv(genuses_subset_day_W_values, "genuses_subset_day_W_values.csv")

#Balloon plot of relative abundance of top GENUSES for each sample
genuses_sample_name = rbind(genuses[,-c(71,72)], colSums(genuses))
genuses_sample_name = cbind(genuses_sample_name, c(as.character(level_6[,72]),NA))
genuses_sample_name_ordered_by_sum = genuses_sample_name[,order(as.numeric(genuses_sample_name[55,]), decreasing = FALSE)]
genuses_sample_name_ordered_by_sum_samples = genuses_sample_name_ordered_by_sum[55,]
genuses_sample_name_ordered_by_sum = genuses_sample_name_ordered_by_sum[-55,]
colnames(genuses_sample_name_ordered_by_sum)[71] = "sample_name"
genuses_sample_name_ordered_by_sum_melted = melt(genuses_sample_name_ordered_by_sum[,c(ncol(genuses_sample_name_ordered_by_sum)-(10:1),ncol(genuses_sample_name_ordered_by_sum))]) # -> top 10
ggballoonplot(genuses_sample_name_ordered_by_sum_melted, x = "sample_name", y = "variable")

day_1_genuses_sum = colSums(day_1_genuses)
day_16_genuses_sum = colSums(day_16_genuses)
day_31_genuses_sum = colSums(day_31_genuses)

day_1_before_genuses = genuses[which(level_6[,"Sampling.Day.."] == 1 & level_6[,"Oil.Pulling...Before..2..or.After..1.."] == 2),]
day_1_after_genuses = genuses[which(level_6[,"Sampling.Day.."] == 1 & level_6[,"Oil.Pulling...Before..2..or.After..1.."] == 1),]
day_16_before_genuses = genuses[which(level_6[,"Sampling.Day.."] == 16 & level_6[,"Oil.Pulling...Before..2..or.After..1.."] == 2),]
day_16_after_genuses = genuses[which(level_6[,"Sampling.Day.."] == 16 & level_6[,"Oil.Pulling...Before..2..or.After..1.."] == 1),]
day_31_before_genuses = genuses[which(level_6[,"Sampling.Day.."] == 31 & level_6[,"Oil.Pulling...Before..2..or.After..1.."] == 2),]
day_31_after_genuses = genuses[which(level_6[,"Sampling.Day.."] == 31 & level_6[,"Oil.Pulling...Before..2..or.After..1.."] == 1),]

day_1_before_genuses_sum = colSums(day_1_before_genuses)
day_1_after_genuses_sum = colSums(day_1_after_genuses)
day_16_before_genuses_sum = colSums(day_16_before_genuses)
day_16_after_genuses_sum = colSums(day_16_after_genuses)
day_31_before_genuses_sum = colSums(day_31_before_genuses)
day_31_after_genuses_sum = colSums(day_31_after_genuses)

all_days_genuses_sum = rbind(day_1_before_genuses_sum, day_1_after_genuses_sum, day_16_before_genuses_sum,
                             day_16_after_genuses_sum, day_31_before_genuses_sum, day_31_after_genuses_sum)[,-c(71,72)]
all_days_genuses_sum = all_days_genuses_sum[,order(colSums(all_days_genuses_sum), decreasing = FALSE)]
all_days_genuses_sum_melted = melt(all_days_genuses_sum[,c(ncol(all_days_genuses_sum)-(29:0))])
all_days_genuses_sum_melted[,"value"] = sqrt(all_days_genuses_sum_melted[,"value"])

ggplot(all_days_genuses_sum_melted, mapping = aes(x = Var1, y = Var2, fill = value)) +
  geom_tile() +
  scale_fill_gradientn(colours = c("Blue", "White", "Red"), values = c(0,0.5,1), limits = c(0,400)) +
  scale_x_discrete("Day", labels = c("Day 1 Before", "Day 1 After", "Day 16 Before", "Day 16 After", "Day 31 Before", "Day 31 After")) +
  ylab("Genera") + 
  labs(fill = "Square root of relative abundance")


##Beta
bray_curtis = read.table("diversity_metrics/beta/bray_curtis-distance_matrix.tsv")
generalized_unifrac = read.table("diversity_metrics/beta/generalized_unifrac-distance_matrix.tsv")
jaccard = read.table("diversity_metrics/beta/jaccard-distance_matrix.tsv")
unweighted_unifrac = read.table("diversity_metrics/beta/unweighted_unifrac-distance_matrix.tsv")
weighted_normalized_unifrac = read.table("diversity_metrics/beta/weighted_normalized_unifrac-distance_matrix.tsv")
weighted_unifrac = read.table("diversity_metrics/beta/weighted_unifrac-distance_matrix.tsv")

sampling.day.1 = c("515rcbc257", "515rcbc263", "515rcbc479", "515rcbc454", "515rcbc239", "515rcbc254", "515rcbc251", "515rcbc245", "515rcbc269", 
                   "515rcbc242", "515rcbc467", "515rcbc461", "515rcbc482", "515rcbc266", "515rcbc248", "515rcbc458")
sampling.day.16 = c("515rcbc255", "515rcbc267", "515rcbc264", "515rcbc495", "515rcbc243", "515rcbc464", "515rcbc240", "515rcbc249", "515rcbc470", 
                    "515rcbc261", "515rcbc252", "515rcbc480", "515rcbc456", "515rcbc462", "515rcbc270", "515rcbc258", "515rcbc483")
sampling.day.31 = c("515rcbc247", "515rcbc496", "515rcbc484", "515rcbc271", "515rcbc472", "515rcbc259", "515rcbc265", "515rcbc256", "515rcbc466", 
                    "515rcbc457", "515rcbc471", "515rcbc262", "515rcbc478", "515rcbc465", "515rcbc253", "515rcbc268", "515rcbc493", "515rcbc241", 
                    "515rcbc250", "515rcbc244", "515rcbc477")
before.oil.pulling = c("515rcbc454", "515rcbc254", "515rcbc242", "515rcbc467", "515rcbc482", "515rcbc266", "515rcbc248", "515rcbc458", "515rcbc255", 
                       "515rcbc267", "515rcbc495", "515rcbc243", "515rcbc249", "515rcbc261", "515rcbc456", "515rcbc462", "515rcbc483", "515rcbc496", 
                       "515rcbc484", "515rcbc256", "515rcbc457", "515rcbc471", "515rcbc262", "515rcbc465", "515rcbc268", "515rcbc250", "515rcbc244", 
                       "515rcbc477")
after.oil.pulling = c("515rcbc257", "515rcbc263", "515rcbc479", "515rcbc239", "515rcbc251", "515rcbc245", "515rcbc269", "515rcbc461", "515rcbc264", 
                      "515rcbc464", "515rcbc240", "515rcbc470", "515rcbc252", "515rcbc480", "515rcbc270", "515rcbc258", "515rcbc247", "515rcbc271", 
                      "515rcbc472", "515rcbc259", "515rcbc265", "515rcbc466", "515rcbc478", "515rcbc253", "515rcbc493", "515rcbc241")

#Scatter
pc.bray_curtis = prcomp(bray_curtis)
pc.generalized_unifrac = prcomp(generalized_unifrac)
pc.jaccard = prcomp(jaccard)
pc.unweighted_unifrac = prcomp(unweighted_unifrac)
pc.weighted_normalized_unifrac = prcomp(weighted_normalized_unifrac)
pc.weighted_unifrac = prcomp(weighted_unifrac)

pc.bray_curtis$sdev[1:3]^2/sum(pc.bray_curtis$sdev^2)
pc.generalized_unifrac$sdev[1:3]^2/sum(pc.generalized_unifrac$sdev^2)
pc.jaccard$sdev[1:3]^2/sum(pc.jaccard$sdev^2)
pc.unweighted_unifrac$sdev[1:3]^2/sum(pc.unweighted_unifrac$sdev^2)
pc.weighted_normalized_unifrac$sdev[1:3]^2/sum(pc.weighted_normalized_unifrac$sdev^2)
pc.weighted_unifrac$sdev[1:3]^2/sum(pc.weighted_unifrac$sdev^2)

scree.plot = t(data.frame("Bray Curtis" = sum(pc.bray_curtis$sdev[1:3]^2/sum(pc.bray_curtis$sdev^2)),
                        "Generalized UniFrac" = sum(pc.generalized_unifrac$sdev[1:3]^2/sum(pc.generalized_unifrac$sdev^2)),
                        "Jaccard" = sum(pc.jaccard$sdev[1:3]^2/sum(pc.jaccard$sdev^2)),
                        "Unweighted UniFrac" = sum(pc.unweighted_unifrac$sdev[1:3]^2/sum(pc.unweighted_unifrac$sdev^2)),
                        "Weighted Normalized UniFrac" = sum(pc.weighted_normalized_unifrac$sdev[1:3]^2/sum(pc.weighted_normalized_unifrac$sdev^2)),
                        "Weighted UniFrac" = sum(pc.weighted_unifrac$sdev[1:3]^2/sum(pc.weighted_unifrac$sdev^2))))

barplot(scree.plot[c(1,3,4),1], ylim = c(0,1), ylab = "Percentage variance explained", col = "black") + 
  grid(NA, 5, lty = 1, col = "grey", lwd = 0.5) #scree plot

print(sprintf("The percentage variance explained is %3f", pc.bray_curtis$sdev[1:3]^2/sum(pc.bray_curtis$sdev^2)))

pc.bray_curtis.grouped = data.frame(cbind(pc.bray_curtis$x[,1:3], ba = rep(NA, nrow(pc.bray_curtis$x)), group = rep(NA, nrow(pc.bray_curtis$x)), colour = rep(NA, nrow(pc.bray_curtis$x))))
pc.generalized_unifrac.grouped = data.frame(cbind(pc.generalized_unifrac$x[,1:3], ba = rep(NA, nrow(pc.generalized_unifrac$x)), group = rep(NA, nrow(pc.generalized_unifrac$x)), colour = rep(NA, nrow(pc.generalized_unifrac$x))))
pc.jaccard.grouped = data.frame(cbind(pc.jaccard$x[,1:3], ba = rep(NA, nrow(pc.jaccard$x)), group = rep(NA, nrow(pc.jaccard$x)), colour = rep(NA, nrow(pc.jaccard$x))))
pc.unweighted_unifrac.grouped = data.frame(cbind(pc.unweighted_unifrac$x[,1:3], ba = rep(NA, nrow(pc.unweighted_unifrac$x)), group = rep(NA, nrow(pc.unweighted_unifrac$x)), colour = rep(NA, nrow(pc.unweighted_unifrac$x))))
pc.weighted_normalized_unifrac.grouped = data.frame(cbind(pc.weighted_normalized_unifrac$x[,1:3], ba = rep(NA, nrow(pc.weighted_normalized_unifrac$x)), group = rep(NA, nrow(pc.weighted_normalized_unifrac$x)), colour = rep(NA, nrow(pc.weighted_normalized_unifrac$x))))
pc.weighted_unifrac.grouped = data.frame(cbind(pc.weighted_unifrac$x[,1:3], ba = rep(NA, nrow(pc.weighted_unifrac$x)), group = rep(NA, nrow(pc.weighted_unifrac$x)), colour = rep(NA, nrow(pc.weighted_unifrac$x))))

scatter.grouped = function(grouped){
  grouped[intersect(sampling.day.1, before.oil.pulling),"group"] = "Before Day 1"
  grouped[intersect(sampling.day.1, after.oil.pulling),"group"] = "After Day 1"
  grouped[intersect(sampling.day.16, before.oil.pulling),"group"] = "Before Day 16"
  grouped[intersect(sampling.day.16, after.oil.pulling),"group"] = "After Day 16"
  grouped[intersect(sampling.day.31, before.oil.pulling),"group"] = "Before Day 31"
  grouped[intersect(sampling.day.31, after.oil.pulling),"group"] = "After Day 31"
  grouped[intersect(sampling.day.1, before.oil.pulling),"colour"] = "#F8766D"
  grouped[intersect(sampling.day.1, after.oil.pulling),"colour"] = "#F6F86D"
  grouped[intersect(sampling.day.16, before.oil.pulling),"colour"] = "#00BA38"
  grouped[intersect(sampling.day.16, after.oil.pulling),"colour"] = "#00BCD8"
  grouped[intersect(sampling.day.31, before.oil.pulling),"colour"] = "#000000"
  grouped[intersect(sampling.day.31, after.oil.pulling),"colour"] = "#E76BF3"
  grouped[before.oil.pulling,"ba"] = "Before"
  grouped[after.oil.pulling,"ba"] = "After"
  return(grouped)
}

pc.bray_curtis.grouped = scatter.grouped(pc.bray_curtis.grouped)
pc.generalized_unifrac.grouped = scatter.grouped(pc.generalized_unifrac.grouped)
pc.jaccard.grouped = scatter.grouped(pc.jaccard.grouped)
pc.unweighted_unifrac.grouped = scatter.grouped(pc.unweighted_unifrac.grouped)
pc.weighted_normalized_unifrac.grouped = scatter.grouped(pc.weighted_normalized_unifrac.grouped)
pc.weighted_unifrac.grouped = scatter.grouped(pc.weighted_unifrac.grouped)

pc.bray_curtis.grouped.1.31 = pc.bray_curtis.grouped[intersect(c(sampling.day.1,sampling.day.31), before.oil.pulling),]
pc.jaccard.grouped.1.31 = pc.jaccard.grouped[intersect(c(sampling.day.1,sampling.day.31), before.oil.pulling),]
pc.unweighted_unifrac.grouped.1.31 = pc.unweighted_unifrac.grouped[intersect(c(sampling.day.1,sampling.day.31), before.oil.pulling),]


par(mfrow=c(3,2), mar=c(1,0,1,0))

bray_curtis.scatter = scatter3D(pc.bray_curtis.grouped[,1], pc.bray_curtis.grouped[,2], pc.bray_curtis.grouped[,3],
                                xlab = sprintf("\nPrincipal Component 1 \n(%.3f%%)", pc.bray_curtis$sdev[1:3]^2/sum(pc.bray_curtis$sdev^2)*100)[1],
                                ylab = sprintf("\nPrincipal Component 2 \n(%.3f%%)", pc.bray_curtis$sdev[1:3]^2/sum(pc.bray_curtis$sdev^2)*100)[2],
                                zlab = sprintf("\nPrincipal Component 3 \n(%.3f%%)", pc.bray_curtis$sdev[1:3]^2/sum(pc.bray_curtis$sdev^2)*100)[3],
                                col = pc.bray_curtis.grouped[,6], type = "p", angle = 45, box = TRUE, bty = "g", colvar = NULL,
                                theta = 20, phi = 20, main = "PCoA of Bray Curtis Distances", cex.main = 1.3, 
                                alpha = 0.5, pch = 16, cex = 2)

jaccard.scatter = scatter3D(pc.jaccard.grouped[,1], pc.jaccard.grouped[,2], pc.jaccard.grouped[,3],
                     xlab = sprintf("\nPrincipal Component 1 \n(%.3f%%)", pc.jaccard$sdev[1:3]^2/sum(pc.jaccard$sdev^2)*100)[1],
                     ylab = sprintf("\nPrincipal Component 2 \n(%.3f%%)", pc.jaccard$sdev[1:3]^2/sum(pc.jaccard$sdev^2)*100)[2],
                     zlab = sprintf("\nPrincipal Component 3 \n(%.3f%%)", pc.jaccard$sdev[1:3]^2/sum(pc.jaccard$sdev^2)*100)[3],
                     col = pc.jaccard.grouped[,6], type = "p", angle = 45, box = TRUE, bty = "g", colvar = NULL,
                     theta = 20, phi = 20, main = "PCoA of Jaccard Distances", cex.main = 1.3, 
                     alpha = 0.5, pch = 16, cex = 2)

unweighted_unifrac.scatter = scatter3D(pc.unweighted_unifrac.grouped[,1], pc.unweighted_unifrac.grouped[,2], pc.unweighted_unifrac.grouped[,3],
                                xlab = sprintf("\nPrincipal Component 1 \n(%.3f%%)", pc.unweighted_unifrac$sdev[1:3]^2/sum(pc.unweighted_unifrac$sdev^2)*100)[1],
                                ylab = sprintf("\nPrincipal Component 2 \n(%.3f%%)", pc.unweighted_unifrac$sdev[1:3]^2/sum(pc.unweighted_unifrac$sdev^2)*100)[2],
                                zlab = sprintf("\nPrincipal Component 3 \n(%.3f%%)", pc.unweighted_unifrac$sdev[1:3]^2/sum(pc.unweighted_unifrac$sdev^2)*100)[3],
                                col = pc.unweighted_unifrac.grouped[,6], type = "p", angle = 45, box = TRUE, bty = "g", colvar = NULL,
                                theta = 20, phi = 20, main = "PCoA of Unweighted UniFrac Distances", cex.main = 1.3, 
                                alpha = 0.5, pch = 16, cex = 2)

bray_curtis.scatter.1.31 = scatter3D(pc.bray_curtis.grouped.1.31[,1], pc.bray_curtis.grouped.1.31[,2], pc.bray_curtis.grouped.1.31[,3],
                                     xlab = sprintf("\nPrincipal Component 1 \n(%.3f%%)", pc.bray_curtis$sdev[1:3]^2/sum(pc.bray_curtis$sdev^2)*100)[1],
                                     ylab = sprintf("\nPrincipal Component 2 \n(%.3f%%)", pc.bray_curtis$sdev[1:3]^2/sum(pc.bray_curtis$sdev^2)*100)[2],
                                     zlab = sprintf("\nPrincipal Component 3 \n(%.3f%%)", pc.bray_curtis$sdev[1:3]^2/sum(pc.bray_curtis$sdev^2)*100)[3],
                                     col = pc.bray_curtis.grouped.1.31[,6], type = "p", angle = 45, box = TRUE, bty = "g", colvar = NULL,
                                     theta = 20, phi = 20, cex.main = 1.3, 
                                     alpha = 0.5, pch = 16, cex = 2)

jaccard.scatter.1.31 = scatter3D(pc.jaccard.grouped.1.31[,1], pc.jaccard.grouped.1.31[,2], pc.jaccard.grouped.1.31[,3],
                                 xlab = sprintf("\nPrincipal Component 1 \n(%.3f%%)", pc.jaccard$sdev[1:3]^2/sum(pc.jaccard$sdev^2)*100)[1],
                                 ylab = sprintf("\nPrincipal Component 2 \n(%.3f%%)", pc.jaccard$sdev[1:3]^2/sum(pc.jaccard$sdev^2)*100)[2],
                                 zlab = sprintf("\nPrincipal Component 3 \n(%.3f%%)", pc.jaccard$sdev[1:3]^2/sum(pc.jaccard$sdev^2)*100)[3],
                                 col = pc.jaccard.grouped.1.31[,6], type = "p", angle = 45, box = TRUE, bty = "g", colvar = NULL,
                                 theta = 20, phi = 20, cex.main = 1.3, 
                                 alpha = 0.5, pch = 16, cex = 2)

unweighted_unifrac.scatter.1.31 = scatter3D(pc.unweighted_unifrac.grouped.1.31[,1], pc.unweighted_unifrac.grouped.1.31[,2], pc.unweighted_unifrac.grouped.1.31[,3],
                                            xlab = sprintf("\nPrincipal Component 1 \n(%.3f%%)", pc.unweighted_unifrac$sdev[1:3]^2/sum(pc.unweighted_unifrac$sdev^2)*100)[1],
                                            ylab = sprintf("\nPrincipal Component 2 \n(%.3f%%)", pc.unweighted_unifrac$sdev[1:3]^2/sum(pc.unweighted_unifrac$sdev^2)*100)[2],
                                            zlab = sprintf("\nPrincipal Component 3 \n(%.3f%%)", pc.unweighted_unifrac$sdev[1:3]^2/sum(pc.unweighted_unifrac$sdev^2)*100)[3],
                                            col = pc.unweighted_unifrac.grouped.1.31[,6], type = "p", angle = 45, box = TRUE, bty = "g", colvar = NULL,
                                            theta = 20, phi = 20, cex.main = 1.3, 
                                            alpha = 0.5, pch = 16, cex = 2)

generalized_unifrac.scatter = scatter3D(pc.generalized_unifrac.grouped[,1], pc.generalized_unifrac.grouped[,2], pc.generalized_unifrac.grouped[,3],
                                        xlab = sprintf("\nPrincipal Component 1 \n(%.3f%%)", pc.generalized_unifrac$sdev[1:3]^2/sum(pc.generalized_unifrac$sdev^2)*100)[1],
                                        ylab = sprintf("\nPrincipal Component 2 \n(%.3f%%)", pc.generalized_unifrac$sdev[1:3]^2/sum(pc.generalized_unifrac$sdev^2)*100)[2],
                                        zlab = sprintf("\nPrincipal Component 3 \n(%.3f%%)", pc.generalized_unifrac$sdev[1:3]^2/sum(pc.generalized_unifrac$sdev^2)*100)[3],
                                        col = pc.jaccard.grouped[,6], type = "p", angle = 45, box = TRUE, bty = "g", colvar = NULL,
                                        theta = 20, phi = 20, main = "PCA of Generalized UniFrac Distances", cex.main = 1.3, 
                                        alpha = 0.5, pch = 16, cex = 2)

weighted_normalized_unifrac.scatter = scatter3D(pc.weighted_normalized_unifrac.grouped[,1], pc.weighted_normalized_unifrac.grouped[,2], pc.weighted_normalized_unifrac.grouped[,3],
                                                xlab = sprintf("\nPrincipal Component 1 \n(%.3f%%)", pc.weighted_normalized_unifrac$sdev[1:3]^2/sum(pc.weighted_normalized_unifrac$sdev^2)*100)[1],
                                                ylab = sprintf("\nPrincipal Component 2 \n(%.3f%%)", pc.weighted_normalized_unifrac$sdev[1:3]^2/sum(pc.weighted_normalized_unifrac$sdev^2)*100)[2],
                                                zlab = sprintf("\nPrincipal Component 3 \n(%.3f%%)", pc.weighted_normalized_unifrac$sdev[1:3]^2/sum(pc.weighted_normalized_unifrac$sdev^2)*100)[3],
                                                col = pc.weighted_normalized_unifrac.grouped[,6], type = "p", angle = 45, box = TRUE, bty = "g", colvar = NULL,
                                                theta = 20, phi = 20, main = "PCA of Weighted Normalized UniFrac Distances", cex.main = 1.3, 
                                                alpha = 0.5, pch = 16, cex = 2)

weighted_unifrac.scatter = scatter3D(pc.weighted_unifrac.grouped[,1], pc.weighted_unifrac.grouped[,2], pc.weighted_unifrac.grouped[,3],
                                     xlab = sprintf("\nPrincipal Component 1 \n(%.3f%%)", pc.weighted_unifrac$sdev[1:3]^2/sum(pc.weighted_unifrac$sdev^2)*100)[1],
                                     ylab = sprintf("\nPrincipal Component 2 \n(%.3f%%)", pc.weighted_unifrac$sdev[1:3]^2/sum(pc.weighted_unifrac$sdev^2)*100)[2],
                                     zlab = sprintf("\nPrincipal Component 3 \n(%.3f%%)", pc.weighted_unifrac$sdev[1:3]^2/sum(pc.weighted_unifrac$sdev^2)*100)[3],
                                     col = pc.weighted_unifrac.grouped[,6], type = "p", angle = 45, box = TRUE, bty = "g", colvar = NULL,
                                     theta = 20, phi = 20, main = "PCA of Weighted UniFrac Distances", cex.main = 1.3, 
                                     alpha = 0.5, pch = 16, cex = 2)

plot(pc.weighted_unifrac.grouped[,1], pc.weighted_unifrac.grouped[,2],
                                     xlab = sprintf("\nPrincipal Component 1 \n(%.3f%%)", pc.weighted_unifrac$sdev[1:3]^2/sum(pc.weighted_unifrac$sdev^2)*100)[1],
                                     ylab = sprintf("\nPrincipal Component 1 \n(%.3f%%)", pc.weighted_unifrac$sdev[1:3]^2/sum(pc.weighted_unifrac$sdev^2)*100)[2],
                                     col = pc.weighted_unifrac.grouped[,6], type = "p", angle = 45, box = TRUE, bty = "g", colvar = NULL,
                                     theta = 20, phi = 20, main = "PCA of Weighted UniFrac Distances", cex.main = 1.3, 
                                     alpha = 0.5, pch = 16, cex = 2, legend = TRUE)

dev.off()

plotrgl()

#plot_ly(data = pc.bray_curtis.grouped, x = ~ PC1, y = ~ PC2, z = ~ PC3, type = "scatter3d", mode = "markers", color = ~ group, colors = c("red", "green", "blue"))

#Box
bray_curtis.grouped = cbind(bray_curtis, ba = rep(NA, nrow(pc.bray_curtis$x)),group = rep(NA, nrow(bray_curtis)), day = rep(NA, nrow(bray_curtis)))
generalized_unifrac.grouped = cbind(generalized_unifrac, ba = rep(NA, nrow(pc.generalized_unifrac$x)), group = rep(NA, nrow(generalized_unifrac)), day = rep(NA, nrow(generalized_unifrac)))
jaccard.grouped = cbind(jaccard, ba = rep(NA, nrow(pc.jaccard$x)), group = rep(NA, nrow(jaccard)), day = rep(NA, nrow(jaccard)))
unweighted_unifrac.grouped = cbind(unweighted_unifrac, ba = rep(NA, nrow(pc.unweighted_unifrac$x)), group = rep(NA, nrow(unweighted_unifrac)), day = rep(NA, nrow(unweighted_unifrac)))
weighted_normalized_unifrac.grouped = cbind(weighted_normalized_unifrac, ba = rep(NA, nrow(pc.unweighted_unifrac$x)), group = rep(NA, nrow(weighted_normalized_unifrac)), day = rep(NA, nrow(weighted_normalized_unifrac)))
weighted_unifrac.grouped = cbind(weighted_unifrac, ba = rep(NA, nrow(pc.weighted_unifrac$x)), group = rep(NA, nrow(weighted_unifrac)), day = rep(NA, nrow(weighted_unifrac)))

box.grouped = function(grouped){
  grouped[intersect(sampling.day.1, before.oil.pulling),"group"] = "Before Day 1"
  grouped[intersect(sampling.day.1, after.oil.pulling),"group"] = "After Day 1"
  grouped[intersect(sampling.day.16, before.oil.pulling),"group"] = "Before Day 16"
  grouped[intersect(sampling.day.16, after.oil.pulling),"group"] = "After Day 16"
  grouped[intersect(sampling.day.31, before.oil.pulling),"group"] = "Before Day 31"
  grouped[intersect(sampling.day.31, after.oil.pulling),"group"] = "After Day 31"
  grouped[sampling.day.1,"day"] = "Day 1"
  grouped[sampling.day.16,"day"] = "Day 16"
  grouped[sampling.day.31,"day"] = "Day 31"
  grouped[before.oil.pulling,"ba"] = "Before"
  grouped[after.oil.pulling,"ba"] = "After"
  grouped$group = factor(grouped$group, levels = c("Before Day 1","After Day 1","Before Day 16","After Day 16","Before Day 31","After Day 31"))
  return(grouped)
}

bray_curtis.grouped = box.grouped(bray_curtis.grouped)
generalized_unifrac.grouped = box.grouped(generalized_unifrac.grouped)
jaccard.grouped = box.grouped(jaccard.grouped)
unweighted_unifrac.grouped = box.grouped(unweighted_unifrac.grouped)
weighted_normalized_unifrac.grouped = box.grouped(weighted_normalized_unifrac.grouped)
weighted_unifrac.grouped = box.grouped(weighted_unifrac.grouped)

bray_curtis.grouped.melted = melt(bray_curtis.grouped)
generalized_unifrac.grouped.melted = melt(generalized_unifrac.grouped)
jaccard.grouped.melted = melt(jaccard.grouped)
unweighted_unifrac.grouped.melted = melt(unweighted_unifrac.grouped)
weighted_normalized_unifrac.grouped.melted = melt(weighted_normalized_unifrac.grouped)
weighted_unifrac.grouped.melted = melt(weighted_unifrac.grouped)

bray_curtis.box = ggplot(bray_curtis.grouped.melted, aes(x = factor(group, levels = levels(factor(group))), y = value, color = group)) +
  geom_boxplot() +
  labs(title = "Bray Curtis", x = "", y = "Distance") +
  facet_wrap(~ day, scales = "free_x") +
  scale_x_discrete(labels = c("Before", "After")) +
  scale_y_continuous(limits = c(0,1)) +
  theme(legend.position = "none") + #, axis.title.y = element_blank() , axis.text.y = element_blank(),axis.ticks.y = element_blank()
  scale_color_manual(name = "group", 
                     breaks = c("Before Day 1","After Day 1","Before Day 16","After Day 16","Before Day 31","After Day 31"),
                     values = c("#F8766D", "#F6F86D", "#00BA38", "#00BCD8", "#000000", "#E76BF3"))

generalized_unifrac.box = ggplot(generalized_unifrac.grouped.melted, aes(x = factor(group, levels = levels(factor(group))), y = value, color = group)) +
  geom_boxplot() +
  labs(title = "Generalized UniFrac", x = "", y = "Distance") +
  facet_wrap(~ day, scales = "free_x") +
  scale_x_discrete(labels = c("Before", "After")) +
  scale_y_continuous(limits = c(0,1)) +
  theme(legend.position = "none") + #, axis.title.y = element_blank() , axis.text.y = element_blank(),axis.ticks.y = element_blank()
  scale_color_manual(name = "group", 
                     breaks = c("Before Day 1","After Day 1","Before Day 16","After Day 16","Before Day 31","After Day 31"),
                     values = c("#F8766D", "#F6F86D", "#00BA38", "#00BCD8", "#000000", "#E76BF3"))

jaccard.box = ggplot(jaccard.grouped.melted, aes(x = factor(group, levels = levels(factor(group))), y = value, color = group)) +
  geom_boxplot() +
  labs(title = "Jaccard", x = "", y = "Distance") +
  facet_wrap(~ day, scales = "free_x") +
  scale_x_discrete(labels = c("Before", "After")) +
  scale_y_continuous(limits = c(0,1)) +
  theme(legend.position = "none") + #, axis.title.y = element_blank() , axis.text.y = element_blank(),axis.ticks.y = element_blank()
  scale_color_manual(name = "group", 
                     breaks = c("Before Day 1","After Day 1","Before Day 16","After Day 16","Before Day 31","After Day 31"),
                     values = c("#F8766D", "#F6F86D", "#00BA38", "#00BCD8", "#000000", "#E76BF3"))

unweighted_unifrac.box = ggplot(unweighted_unifrac.grouped.melted, aes(x = factor(group, levels = levels(factor(group))), y = value, color = group)) +
  geom_boxplot() +
  labs(title = "Unweighted UniFrac", x = "", y = "Distance") +
  facet_wrap(~ day, scales = "free_x") +
  scale_x_discrete(labels = c("Before", "After")) +
  scale_y_continuous(limits = c(0,1)) +
  theme(legend.position = "none") +
  scale_color_manual(name = "group", 
                     breaks = c("Before Day 1","After Day 1","Before Day 16","After Day 16","Before Day 31","After Day 31"),
                     values = c("#F8766D", "#F6F86D", "#00BA38", "#00BCD8", "#000000", "#E76BF3"))

weighted_normalized_unifrac.box = ggplot(weighted_normalized_unifrac.grouped.melted, aes(x = factor(group, levels = levels(factor(group))), y = value, color = group)) +
  geom_boxplot() +
  labs(title = "Weighted Normalized UniFrac", x = "", y = "Distance") +
  facet_wrap(~ day, scales = "free_x") +
  scale_x_discrete(labels = c("Before", "After")) +
  scale_y_continuous(limits = c(0,1)) +
  theme(legend.position = "none", axis.title.y = element_blank()) + # , axis.text.y = element_blank(),axis.ticks.y = element_blank()
  scale_color_manual(name = "group", 
                     breaks = c("Before Day 1","After Day 1","Before Day 16","After Day 16","Before Day 31","After Day 31"),
                     values = c("#F8766D", "#F6F86D", "#00BA38", "#00BCD8", "#000000", "#E76BF3"))

weighted_unifrac.box = ggplot(weighted_unifrac.grouped.melted, aes(x = factor(group, levels = levels(factor(group))), y = value, color = group)) +
  geom_boxplot() +
  labs(title = "Weighted UniFrac", x = "", y = "Distance") +
  facet_wrap(~ day, scales = "free_x") +
  scale_x_discrete(labels = c("Before", "After")) +
  scale_y_continuous(limits = c(0,1)) +
  theme(legend.position = "none", axis.title.y = element_blank()) + # , axis.text.y = element_blank(),axis.ticks.y = element_blank()
  scale_color_manual(name = "group", 
                     breaks = c("Before Day 1","After Day 1","Before Day 16","After Day 16","Before Day 31","After Day 31"),
                     values = c("#F8766D", "#F6F86D", "#00BA38", "#00BCD8", "#000000", "#E76BF3"))

grid.arrange(bray_curtis.box,jaccard.box, 
             unweighted_unifrac.box,  
             ncol = 2) # generalized_unifrac.box, weighted_normalized_unifrac.box, weighted_unifrac.box,

compare_means(value ~ day, bray_curtis.grouped.melted, method = "wilcox.test", group.by = "ba")
compare_means(value ~ day, generalized_unifrac.grouped.melted, method = "wilcox.test", group.by = "ba")
compare_means(value ~ day, jaccard.grouped.melted, method = "wilcox.test", group.by = "ba")
compare_means(value ~ day, unweighted_unifrac.grouped.melted, method = "wilcox.test", group.by = "ba")
compare_means(value ~ day, weighted_normalized_unifrac.grouped.melted, method = "wilcox.test", group.by = "ba")
compare_means(value ~ day, weighted_unifrac.grouped.melted, method = "wilcox.test", group.by = "ba")

compare_means(value ~ group, bray_curtis.grouped.melted, method = "wilcox.test", group.by = "day")
compare_means(value ~ group, generalized_unifrac.grouped.melted, method = "wilcox.test", group.by = "day")
compare_means(value ~ group, jaccard.grouped.melted, method = "wilcox.test", group.by = "day")
compare_means(value ~ group, unweighted_unifrac.grouped.melted, method = "wilcox.test", group.by = "day")
compare_means(value ~ group, weighted_normalized_unifrac.grouped.melted, method = "wilcox.test", group.by = "day")
compare_means(value ~ group, weighted_unifrac.grouped.melted, method = "wilcox.test", group.by = "day")

#boxplot(as.numeric(bray_curtis[intersect(sampling.day.1, before.oil.pulling),1]))





d = melt(c(level_6[,2:71], level_6[,75]), id.vars="Sampling.Day..")

# Everything on the same plot

variable = colnames(level_6)[75]

ggplot(d, aes_string(x=colnames(level_6)[75], y = colnames(level_6)[2:71], group = colnames(level_6)[75])) + 
  geom_line(aes_string(colour=colnames(level_6)[75]))
